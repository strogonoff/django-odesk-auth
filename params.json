{"name":"django-odesk-auth","tagline":"Django app for simple “Log in via oDesk” functionality. Authentication backend and a couple of views.","body":"Simple oDesk login for your Django-based project\r\n================================================\r\n\r\n\r\nCreating oDesk OAuth API key\r\n----------------------------\r\n\r\nGo to https://www.odesk.com/services/api/apply.\r\n\r\n* Authentication type should be set to \"OAuth 1.0\".\r\n* Callback URL should be left blank.\r\n* Permission \"View the structure of your companies/teams\" is currently\r\n  required to be checked.\r\n\r\n\r\nQuick start\r\n-----------\r\n\r\nProvided you have installed ``django-odesk-auth`` and ``python-odesk==0.5``.\r\n\r\n1. Add ``django_odesk_auth`` to INSTALLED_APPS.\r\n   Make sure you have ``django.contrib.sites`` app in INSTALLED_APPS as well.\r\n\r\n2. Add ``django_odesk_auth.backends.ODeskOAuthBackend``\r\n   to AUTHENTICATION_BACKENDS.\r\n\r\n3. Specify ``ODESK_OAUTH_KEY`` and ``ODESK_OAUTH_SECRET`` settings\r\n   with your key information.\r\n\r\n4. Add your_username@odesk.com to ``ODESK_AUTH_ALLOWED_USERS``,\r\n   and set ``ODESK_AUTH_CREATE_UNKNOWN_USER`` to True.\r\n\r\n5. Include ``django_odesk_auth.urls`` in your URL patterns.\r\n\r\n6. In your login page template, put a link \"Log in via oDesk\" and point it\r\n   to ``{% url \"odesk_oauth_login\" %}``.\r\n\r\n7. Open login page and click \"Log in via oDesk\" to verify everything works.\r\n\r\nImportant: keep ``ODESK_OAUTH_KEY`` and ``ODESK_OAUTH_SECRET`` settings in a file\r\nthat is not under version control.\r\n\r\n\r\nExample project\r\n--------------\r\n\r\nInstall ``django==1.6`` and ``python-odesk==0.5`` (better do this\r\nin virtual Python environment created specifically for example project).\r\n\r\nFill in some critical settings in ``example_project/settings.py`` (see comments),\r\nthen run ``./manage.py syncdb``, then you can run development server and\r\nopen ``localhost:8000``.\r\n\r\n\r\nAccess control\r\n--------------\r\n\r\nCurrently there's no way to turn off access control: you have to explicitly\r\nspecify which teams or particular users are allowed to log in to your site.\r\nYou can also specify which users are assigned staff and superuser status\r\nupon login.\r\n\r\nUsers that aren't allowed to log in get ``User.is_active`` flag set to False.\r\n\r\nSee ``utils.update_user_permissions()`` definition and list of settings below.\r\n\r\n\r\nMaking API calls after authentication\r\n-------------------------------------\r\n\r\nAfter user is successfully authenticated, you can make API calls on their behalf.\r\n\r\nHere's a quick example::\r\n\r\n    from django_odesk_auth import utils, O_ACCESS_TOKEN\r\n    odesk_client = utils.get_client(request.session[O_ACCESS_TOKEN])\r\n    print odesk_client.hr.get_teams()\r\n    # Should output list of teams user has access to\r\n\r\nSome notes:\r\n\r\n* How you make API calls is up to you. Internally django-odesk-auth\r\n  uses python-odesk library, and so does this example.\r\n\r\n* ``utils.get_client()`` function returns an instance of ``odesk.Client``.\r\n  Handy if you're using python-odesk library to make API calls.\r\n\r\n* OAuth access token, obtained during authentication, is stored\r\n  under ``request.session[O_ACCESS_TOKEN]``.\r\n\r\n\r\nChecking OAuth access token\r\n---------------------------\r\n\r\nSometimes there's a need to make sure that current user's authentication\r\nis still valid. You can use ``utils.check_login()`` in Python,\r\nor make an HTTP request to named URL ``'odesk_oauth_check_login'``\r\nfrom client side (see ``views.oauth_check_login``).\r\n\r\n\r\nAvailable settings\r\n------------------\r\n\r\nODESK_OAUTH_KEY, ODESK_OAUTH_SECRET\r\n  API key information.\r\n\r\nODESK_AUTH_CREATE_UNKNOWN_USER = False\r\n  Whether to create a new account in Django if given user logs in via oDesk\r\n  for the first time.\r\n\r\nODESK_AUTH_ALLOWED_USERS = ()\r\n  oDesk emails of users who are allowed to log in via oDesk.\r\n\r\nODESK_AUTH_ADMINS = ()\r\n  oDesk emails of users who are marked as ``is_staff`` upon login.\r\n\r\nODESK_AUTH_SUPERUSERS = ()\r\n  oDesk emails of users who are marked as ``is_superuser`` upon login.\r\n\r\nODESK_AUTH_ALLOWED_TEAMS = ()\r\n  IDs of oDesk teams, members of which are allowed to access FIVS backend.\r\n\r\nODESK_AUTH_ADMIN_TEAMS = ()\r\n  IDs of oDesk teams, members of which are marked as ``is_staff`` upon login.\r\n\r\nODESK_AUTH_SUPERUSER_TEAMS = ()\r\n  IDs of oDesk teams, members of which are marked as ``is_superuser`` upon login.\r\n","google":"UA-24538431-1","note":"Don't delete this file! It's used internally to help with page regeneration."}